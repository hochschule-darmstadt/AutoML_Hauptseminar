/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package App

import com.salesforce.op._
import com.salesforce.op.readers._
import com.salesforce.op.features._
import com.salesforce.op.features.types._
import com.salesforce.op.stages.impl.classification._
import org.apache.spark.SparkConf
import org.apache.spark.sql.SparkSession
import com.salesforce.op.test
import org.apache.hadoop.security.UserGroupInformation;

case class Passenger(
  id: Int,
  survived: Double,
  pClass: Option[Int],
  name: Option[String],
  sex: Option[String],
  age: Option[Double],
  sibSp: Option[Int],
  parCh: Option[Int],
  ticket: Option[String],
  fare: Option[Double],
  cabin: Option[String],
  embarked: Option[String]
)

object App {
  def main(args: Array[String]): Unit = {


    val datpath = Option("/wdir/App/TitanicPassengersTrainData.csv")
    implicit val spark = SparkSession.builder.config(new SparkConf()).getOrCreate()
    import spark.implicits._
    spark.sparkContext.listJars.foreach(println)

// https://scaladoc.transmogrif.ai/index.html#com.salesforce.op.readers.DataReaders$
// https://scaladoc.transmogrif.ai/index.html#com.salesforce.op.readers.CSVProductReader
val passengersData = DataReaders.Simple.csvCase[Passenger](path = datpath).readDataset().toDF()
passengersData.limit(3).show()


// Extract response and predictor Features
// https://scaladoc.transmogrif.ai/index.html#com.salesforce.op.features.FeatureBuilder$@fromDataFrame[ResponseType%3C:com.salesforce.op.features.types.FeatureType](data:org.apache.spark.sql.DataFrame,response:String,nonNullable:Set[String])(implicitevidence$110:reflect.runtime.universe.WeakTypeTag[ResponseType]):(com.salesforce.op.features.Feature[ResponseType],Array[com.salesforce.op.features.Feature[_%3C:com.salesforce.op.features.types.FeatureType]])
val (survived, predictors) = FeatureBuilder.fromDataFrame[RealNN](passengersData, response = "survived")
// survived: Feature[Integral] and predictors Array[Feature]


// https://github.com/salesforce/TransmogrifAI/blob/master/core/src/main/scala/com/salesforce/op/stages/impl/feature/Transmogrifier.scala
val featureVector = predictors.transmogrify()

/*
// Automated feature validation and selection
val checkedFeatures = survived.sanityCheck(featureVector, removeBadFeatures = true)

// Automated model selection
val pred = BinaryClassificationModelSelector().setInput(survived, checkedFeatures).getOutput()

// Setting up a TransmogrifAI workflow and training the model
val model = new OpWorkflow().setInputDataset(passengersData).setResultFeatures(pred).train()

println("Model summary:\n" + model.summaryPretty())

*/
  }

}
